{
  "hash": "7ceec0ac5f8effb5acec8c3de73baf1e",
  "result": {
    "markdown": "---\ntitle: \"HTML Basics\"\nformat: html\ncomments:\n  hypothesis: true\n---\n\n\n\n\n## Overview\n\nUse the `html` format to create HTML output. For example:\n\n``` yaml\n---\ntitle: \"My document\"\nformat:\n  html:\n    toc: true\n    html-math-method: katex\n    css: styles.css\n---\n```\n\nThis example highlights a few of the options available for HTML output. This document covers these and other options in detail. See the HTML [format reference](../reference/formats/html.qmd) for a complete list of all available options.\n\n## Table of Contents\n\nUse the `toc` option to include an automatically generated table of contents in the output document. Use the `toc-depth` option to specify the number of section levels to include in the table of contents. The default is 3 (which means that level-1, 2, and 3 headings will be listed in the contents). For example:\n\n``` markdown\ntoc: true\ntoc-depth: 2\n```\n\nYou can customize the title used for the table of contents using the `toc-title` option:\n\n``` yaml\ntoc-title: Contents\n```\n\nIf you want to exclude a heading from the table of contents, add both the `.unnumbered` and `.unlisted` classes to it:\n\n``` markdown\n### More Options {.unnumbered .unlisted}\n```\n\nThe HTML format by default floats the table of contents to the right. You can alternatively position it at the `left`, or in the `body`. For example:\n\n``` yaml\nformat:\n  html:\n    toc: true\n    toc-location: left\n```\n\nThe floating table of contents can be used to navigate to sections of the document and also will automatically highlight the appropriate section as the user scrolls. The table of contents is responsive and will become hidden once the viewport becomes too narrow. See an example on the right of this page.\n\nNote that the `toc-location` option is not available when you disable the standard HTML theme (e.g. if you specify the `theme: none` or `theme: pandoc` option).\n\n``` include\n_document-options-section-numbering.md\n```\n\n## CSS Styles\n\nTo add a CSS stylesheet to your document, just provide the `css` option. For example:\n\n``` yaml\nformat:\n  html: \n    css: styles.css\n```\n\nUsing the `css` option works well for simple tweaks to document appearance. If you want to do more extensive customization see the documentation on [HTML Themes](html-themes.qmd).\n\n## LaTeX Equations\n\nBy default, LaTeX equations are rendered using [MathJax](https://www.mathjax.org/). Use the `html-math-method` option to choose another method. For example:\n\n``` yaml\nformat:\n  html:\n    html-math-method: katex\n```\n\nYou can also specify a `url` for the library to load for a given method:\n\n``` yaml\nhtml-math-method:\n  method: mathjax\n  url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n```\n\nAvailable math rendering methods include:\n\n+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Method    | Description                                                                                                                                                                                                                      |\n+===========+==================================================================================================================================================================================================================================+\n| `mathjax` | Use [MathJax](https://www.mathjax.org/) to display embedded TeX math in HTML output.                                                                                                                                             |\n+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| `katex`   | Use [KaTeX](https://github.com/Khan/KaTeX) to display embedded TeX math in HTML output.                                                                                                                                          |\n+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| `webtex`  | Convert TeX formulas to `<img>` tags that link to an external script that converts formulas to images.                                                                                                                           |\n+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| `gladtex` | Enclose TeX math in `<eq>` tags in HTML output. The resulting HTML can then be processed by [GladTeX](https://humenda.github.io/GladTeX/) to produce images of the typeset formulas and an HTML file with links to these images. |\n+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| `mathml`  | Convert TeX math to [MathML](https://www.w3.org/Math/) (note that currently only Firefox and Safari natively support MathML)                                                                                                     |\n+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| `plain`   | No special processing (formulas are put inside a `span` with `class=\"math\").`                                                                                                                                                    |\n+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\nNote that this is more detailed documentation on each of these options in the Pandoc [Math Rendering in HTML](https://pandoc.org/MANUAL.html#math-rendering-in-html) documentation.\n\n## Tabsets\n\nYou can use tabsets to present content that will vary in interest depending on the audience. For example, here we provide some example code in a variety of languages:\n\n::: panel-tabset\n## R\n\n``` r\nfizz_buzz <- function(fbnums = 1:50) {\n  output <- dplyr::case_when(\n    fbnums %% 15 == 0 ~ \"FizzBuzz\",\n    fbnums %% 3 == 0 ~ \"Fizz\",\n    fbnums %% 5 == 0 ~ \"Buzz\",\n    TRUE ~ as.character(fbnums)\n  )\n  print(output)\n}\n```\n\n## Python\n\n``` python\ndef fizz_buzz(num):\n  if num % 15 == 0:\n    print(\"FizzBuzz\")\n  elif num % 5 == 0:\n    print(\"Buzz\")\n  elif num % 3 == 0:\n    print(\"Fizz\")\n  else:\n    print(num)\n```\n\n## Java\n\n``` java\npublic class FizzBuzz\n{\n  public static void fizzBuzz(int num)\n  {\n    if (num % 15 == 0) {\n      System.out.println(\"FizzBuzz\");\n    } else if (num % 5 == 0) {\n      System.out.println(\"Buzz\");\n    } else if (num % 3 == 0) {\n      System.out.println(\"Fizz\");\n    } else {\n      System.out.println(num);\n    }\n  }\n}\n```\n\n## Julia\n\n``` julia\nfunction FizzBuzz(num)\n  if num % 15 == 0\n    println(\"FizzBuzz\")\n  elseif num % 5 == 0\n    println(\"Buzz\")\n  elseif num % 3 == 0\n    println(\"Fizz\")\n  else\n    println(num)\n  end\nend\n```\n:::\n\nCreate a tabset via a markdown div with the class name panel-tabset (e.g. `::: {.panel-tabset}`). Each top-level heading within the div creates a new tab. For example, here is the markdown used to implement the first two tabs displayed above:\n\n```` markdown\n::: {.panel-tabset}\n## R\n\n``` {.r}\nfizz_buzz <- function(fbnums = 1:50) {\n  output <- dplyr::case_when(\n    fbnums %% 15 == 0 ~ \"FizzBuzz\",\n    fbnums %% 3 == 0 ~ \"Fizz\",\n    fbnums %% 5 == 0 ~ \"Buzz\",\n    TRUE ~ as.character(fbnums)\n  )\n  print(output)\n}\n```\n\n## Python\n\n``` {.python}\ndef fizz_buzz(num):\n  if num % 15 == 0:\n    print(\"FizzBuzz\")\n  elif num % 5 == 0:\n    print(\"Buzz\")\n  elif num % 3 == 0:\n    print(\"Fizz\")\n  else:\n    print(num)\n```\n\n:::\n````\n\n### Tabset Groups\n\n::: callout-note\nTabset groups are a new feature of [Quarto v1.1](https://quarto.org/docs/download/) so please be sure you've installed that version before attempting to use them.\n:::\n\nIf you have multiple tabsets that include the same tab names, you can define a tabset `group`. Tabs within a `group` are all switched together (so in the example above once a reader switches to R or Python in one tabset the others will follow along). For example:\n\n``` markdown\n::: {.panel-tabset group=\"language\"}\n## R\n\nTab content\n\n## Python\n\nTab content\n:::\n```\n\n## Self Contained\n\nHTML documents typically have a number of external dependencies (e.g. images, CSS style sheets, JavaScript, etc.). By default these dependencies are placed in a `_files` directory alongside your document. For example, if you render `report.qmd` to HTML:\n\n``` {.bash filename=\"Terminal\"}\nquarto render report.qmd --to html\n```\n\nThen the following output is produced:\n\n``` ini\nreport.html\nreport_files/\n```\n\nYou might alternatively want to create an entirely self-contained HTML document (with images, CSS style sheets, JavaScript, etc. embedded into the HTML file). You can do this by specifying the `self-contained` option:\n\n``` yaml\nformat:\n  html:\n    self-contained: true\n```\n\nThis will produce a standalone HTML file with no external dependencies, using `data:` URIs to incorporate the contents of linked scripts, style sheets, images, and videos. The resulting file should be \"self-contained,\" in the sense that it needs no external files and no net access to be displayed properly by a browser.\n\n## Anchor Sections\n\nHover over a section title to see an anchor link. Enable/disable this behavior with:\n\n``` yaml\nformat:\n  html:\n    anchor-sections: true\n```\n\nAnchor links are also automatically added to figures and tables that have a [cross reference](../authoring/cross-references.qmd) defined.\n\n## Smooth Scrolling\n\nEnable smooth scrolling within the page. By default, smooth scroll is not enabled. Enable/disable it with:\n\n``` yaml\nformat:\n  html:\n    smooth-scroll: true\n```\n\n## External Links\n\nBy default external links (i.e. links that don't target the current site) receive no special visual adornment or navigation treatment (the current page is navigated). You can use the following options to modify this behavior:\n\n+---------------------------+--------------------------------------------------------------------------------------------------------------------+\n| Option                    | Description                                                                                                        |\n+===========================+====================================================================================================================+\n| `link-external-icon`      | `true` to show an icon next to the link to indicate that it's external (e.g. [external](#){.external}).            |\n+---------------------------+--------------------------------------------------------------------------------------------------------------------+\n| `link-external-newwindow` | `true` to open external links in a new browser window or tab (rather than navigating the current tab).             |\n+---------------------------+--------------------------------------------------------------------------------------------------------------------+\n| `link-external-filter`    | A regular expression that can be used to determine whether a link is an internal link. For example                 |\n|                           |                                                                                                                    |\n|                           | `^(?:http:|https:)\\/\\/www\\.quarto\\.org\\/custom`                                                                    |\n|                           |                                                                                                                    |\n|                           | will treat links that start with http://www.quarto.org as internal links (and others will be considered external). |\n+---------------------------+--------------------------------------------------------------------------------------------------------------------+\n\nExternal links are identified either using the `site-url` (if provided) or using the `window.host` if no `site-url` or `link-external-filter` is provided. For example, here we enable both options and a custom filter:\n\n``` yaml\nformat:\n  html:\n    link-external-icon: true\n    link-external-newwindow: true\n    link-external-filter: '^(?:http:|https:)\\/\\/www\\.quarto\\.org\\/custom'\n```\n\nYou can also specify one or both of these behaviors for an individual link using the `.external` class and `target` attribute. For example:\n\n``` python\n[example](https://example.com){.external target=\"_blank\"}\n```\n\n## Reference Popups\n\nIf you hover your mouse over the citation and footnote in this sentence you'll see a popup displaying the reference contents:\n\n   Hover over @xie2015 to see a reference to the definitive book on knitr[^1].\n\nThis behavior is enabled by default. You can disable it with the following options:\n\n``` yaml\nformat:\n  html:\n    citations-hover: false\n    footnotes-hover: false\n```\n\n## Commenting\n\nThis page has commenting with [Hypothes.is](https://web.hypothes.is/) enabled via the following YAML option:\n\n``` yaml\ncomments:\n  hypothesis: true\n```\n\nYou can see the Hypothesis UI at the far right of the page. Rather than `true`, you can specify any of the available Hypothesis [embedding options](https://h.readthedocs.io/projects/client/en/latest/publishers/config/) as a sub-key of `hypothesis`. For example:\n\n``` yaml\ncomments:\n  hypothesis: \n    theme: clean\n```\n\nYou can enable [Utterances](https://utteranc.es/){.external} commenting using the `utterances` option. Here you need to specify at least the Git repo you want to use for storing comments:\n\n``` yaml\ncomments:\n  utterances:\n    repo: quarto-dev/quarto-docs\n```\n\nYou can also specify the other options [documented here](https://utteranc.es/).\n\nYou may also enable [Giscus](https://giscus.app) for commenting using the `giscus` option. Giscus will store comments in the 'Discussions' of a Github repo.\n\n``` yaml\ncomments:\n  giscus: \n    repo: quarto-dev/quarto-docs\n```\n\nLike utterances, you need to specify at least the Git repo you want to use for storing comments. In addition, the repo that you use must:\n\n1.  Be public\n\n2.  Have the Giscus app installed.\n\n3.  Have discussion enabled\n\nReview the [Giscus documentation](https://giscus.app) for instructions on setting up Giscus in your repository. Additional options are [covered here](/docs/reference/projects/websites.html#giscus).\n\n### Disabling Comments\n\nIf you have comments enabled for an entire website or book, you can selectively disable comments for a single page by specifying `comments: false`. For example:\n\n``` yaml\ntitle: \"Home Page\"\ncomments: false\n```\n\n``` include\n_document-options-end.md\n```\n\n## Minimal HTML\n\nThe default Quarto HTML output format includes several features by default, including bootstrap themes, anchor sections, reference popups, tabsets, code block copying, and responsive figures. You can disable all of these built in features at once using the `minimal` option. For example:\n\n``` yaml\n---\ntitle: \"My Document\"\nformat:\n  html:\n    minimal: true\n---\n```\n\nWhen specifying `minimal: true` you can still selectively re-enable features you do want, for example:\n\n``` yaml\n---\ntitle: \"My Document\"\nformat:\n  html:\n    minimal: true\n    code-copy: true\n---\n```\n\n[^1]: knitr is an R package for creating dynamic documents.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}