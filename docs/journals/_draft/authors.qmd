---
title: Authors & Affiliations
draft: true
---

An important goal for Quarto is to make it possible to use the same source document to produce multiple output formats. In addition to built in formats like PDF and Docx, format extensions allow users to create output using templates, filters, and more. One challenge for this is how users can specify document metadata that will be consistently accessible to any template (and symmetrically, a large corpus of different templates that use the document metadata without modification).

Much of the Pandoc standard front matter works well as is, but currently the expression of authors (and affiliations) is limited in Pandoc. In the [rticles package](https://pkgs.rstudio.com/rticles/), many templates have specific and custom ways to express author and affiliation metadata, each designed to be aligned with the specific template and its output. In Quarto, we automatically parse the author data, normalize it, and make it available to template authors in a number of standard forms.

## Reading Author Data

Quarto will look in the author field or in the authors field for data that can be parsed into a normalized representation of authors. This can be as simple as a name of list of names:

``` yaml
author:   
  - Norah Jones   
  - Bill Gates
```

or can be a complex data structure expressing a variety of properties and attributes of authors.

``` yaml
author:
  - name: Bill Gates
    orcid: 0000-0003-1689-0557
    email: bill@gates.com
    affiliation:
      - name: Bill & Melinda Gates Foundation
        address: 440 5th Ave N
        city: Seattle
        state: WA
        postal-code: 98109-4631
```

## Normalizing Author Data

Quarto processes the document's author data, normalizing the data, replacing the contents of the author key with a list of names that will render properly in most templates (and in plain pandoc). In addition, the normalized versions of the author and affiliation data will be available in the following metadata keys:

### authors

The authors metadata contains the normalized author data structure. Affiliations are referenced (rather than placed inline), so this typically shouldn't be used by templates to output author data. The order the authors appear in the metadata will be preserved.

### affiliations

The affiliations metadata contains the normalized affiliation data structure. Ids are automatically assigned if not defined. Affiliations contain no reference to their authors, so are typically not used by templates to output affiliation data. The order the affiliations appear in the metadata will be preserved.

### by-author

The by-author metadata contains a denormalized version of the author data organized in the original order of the authors. Rather than referencing affiliations, each author will have the full parsed contents of affiliations available in the affiliations subkey, making it easy for template authors to iterate through authors and then, within that, their affiliations. The order the authors appear in the metadata will be preserved.

### by-affiliation

The by-affiliations metadata contains a denormalized version of affiliation data in the original order the affiliations appeared. Author data appears in order in the authors subkey, which contains the full parsed author data. This makes it easy for template authors to iterate over affiliations and the authors for each affiliation. The order the affiliations appear in the metadata will be preserved.

## Author Schema and Parsing

The complete, normalized, author schema (omitting affiliations for the time being) is as following:

``` yaml
author:
    - id: string
      number: number
      name:
        given: string
        family: string
        literal: string
        dropping-particle: string
        non-dropping-particle: string
      url: string
      email: string
      fax: string
      orcid: string
      note: string
      acknowledgements: string
      attributes:
        corresponding: boolean
        equal-contributor: boolean
        deceased: boolean
      metadata: object
```

### Names

Most often, users will write a single string for name, like:

``` yaml
author: Norah Jones
```

or perhaps like:

``` yaml
author:
  - name: Norah Jones
```

Which will be parsed into:

``` yaml
author:
  - name:
      given: Norah
      family: Jones
      literal: Norah Jones
```

Quarto will parse names using BibTex (a la [openjournals/inara](https://github.com/openjournals/inara/blob/main/data/filters/normalize-author-names.lua)), supporting Bibtex's parsing based upon comma count, capitalization, and so on. When the name is unparseable by Bibtex, Quarto will attempt to parse names into given and family using spaces (everything after the last space is considered a family name), but to disambiguate, you may provide the complete name including separate given and family and particle keys:

``` yaml
name:
  given: Norah
  family: Jones
  dropping-particle: von
```

### Attributes

Recognized atribute keys that appear at the top level (for example, `corresponding`) will automatically be normalized under attributes. For example:

``` yaml
author:
  name: Norah Jones
  corresponding: true
```

would be normalized into:

``` yaml
author:
  - name:
      given: Norah
      family: Jones
      literal: Norah Jones
    attributes:
      corresponding: true
```

### Arbitrary Metadata

The normalized authors schema at the top level is a closed schema. Unrecognized keys that are passed in the root of authors will be normalized under the `metadata` key. For example:

``` yaml
author:
  name: Norah Jones
  corresponding: true
  custom-info: "custom value"
```

would be normalized into:

``` yaml
author:
  - name:
      given: Norah
      family: Jones
      literal: Norah Jones
    attributes:
      corresponding: true
    metadata:
      custom-info: "custom value"
```

Keys that are normalized into `metadata` should be considered potentially template specific and may not be present or depended upon when implementing a template.

## Affiliations Schema and Parsing

The complete, normalized affiliations schema is defined as:

``` yaml
affiliations:
  - id: string
    number: number
    name: string
    department: string
    address: string
    city: string
    region: string
    country: string
    postal-code: string
    url: string
```

### Parsing Notes

-   You may specify either state or region- either will be normalized into the region key.

-   If the you specify only a string for an affiliation, it will be used as the name of affiliation.

-   You may omit an id and the id will be automatically generated (a simple counter based id will be used).

-   The url field may also be populated by an `affiliation-url` key in the author, which preserves compatibility with Distill metadata for authors and affiliations.

## Authors and Affiliations

To combine the above schema, users may specify author and affiliations in a number of different ways. Each will be normalized into the standard schema described above.

### Inline Affiliations

You may write affiliations as simple string or complex affiliations inline. For example:

``` yaml
author:
  - name: Norah Jones
    affiliations:
      - Carnegie Mellon University
      - University of Chicago
```

or

``` yaml
author:
  - name: Norah Jones
    affiliations:
      - name: Carnegie Mellon University
        city: Pittsburgh
        state: PA
      - name: University of Chicago
        city: Chicago
        state: IL
```

### Reference Affiliations

You may write out the affiliations into a separate key and only reference the affiliation in the author. For example:

``` yaml
author:
    - name: Norah Jones
      affiliations:
        - ref: cmu
        - ref: chicago
affiliations:
    - id: cmu
      name: Carnegie Mellon University
      city: Pittsburgh
      state: PA
    - id: chicago
      name: University of Chicago
      city: Chicago
      state: IL
```

### Inline Reference Affiliations

You may also assign ids to affiliations created in the author key and use those ids as references in other authors. For example:

``` yaml
author:
  - name: Norah Jones
    affiliations:
      - id: cmu
        name: Carnegie Mellon University
        city: Pittsburgh
        state: PA
      - id: chicago
        name: University of Chicago
        city: Chicago
        state: IL
  - name: John Hamm
    affiliations:
      - ref: cmu
      - name: University of California, San Diego
        city: San Diego
        state: CA
```
